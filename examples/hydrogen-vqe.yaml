# Workflow API version
apiVersion: io.orquestra.workflow/1.0.0

# Prefix for workflow ID
name: vqe-h2-example

imports:
- name: z-quantum-core
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-core.git"
    branch: "master"
- name: qe-openfermion
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-openfermion.git"
    branch: "master"
- name: z-quantum-vqe
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-vqe.git"
    branch: "master"
- name: z-quantum-optimizers
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/z-quantum-optimizers.git"
    branch: "master"
- name: diatomic-molecule
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/tutorial-1-diatomic-molecule.git"
    branch: "master"
- name: qe-psi4
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-psi4.git"
    branch: "master"
- name: qe-qhipster
  type: git
  parameters:
    repository: "git@github.com:zapatacomputing/qe-qhipster.git"
    branch: "master"

steps:
- name: create-molecule
  config:
    runtime:
      language: python3
      imports: [diatomic-molecule]
      parameters:
        file: diatomic-molecule/diatomicmolecule.py
        function: create_diatomic_molecule
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - species1: "H"
      type: string
    - species2: "H"
      type: string
    - bond_length: 0.7
      type: float
  outputs:
    - name: molecule
      type: molecular-geometry
- name: run-psi4
  passed: [create-molecule]
  config:
    runtime:
      language: python3
      customImage: "zapatacomputing/qe-psi4"
      imports: [z-quantum-core, qe-openfermion, qe-psi4]
      parameters:
        file: qe-psi4/steps/psi4.py
        function: run_psi4
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - basis: "STO-3G"
      type: string
    - method: "scf"
      type: string
    - reference: "rhf"
      type: string
    - geometry: ((create-molecule.molecule))
      type: molecular-geometry
    - freeze_core: False
      type: bool
    - charge: 0
      type: int
    - multiplicity: 1
      type: int
    - save_hamiltonian: True
      type: bool
    - n_active_extract: "None"
      type: string
    - n_occupied_extract: "None"
      type: string
    - freeze_core_extract: False
      type: bool
    - nthreads: 4
      type: int
    - n_active: "None"
      type: string
    - options: "None"
      type: string
    - wavefunction: "None"
      type: string
  outputs:
    - name: hamiltonian
      type: hamiltonian-operator
- name: transform-hamiltonian
  passed: [run-psi4]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, qe-openfermion]
      parameters:
        file: qe-openfermion/steps/transforms.py
        function: transform_interaction_operator
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - transformation: "Jordan-Wigner"
      type: string
    - input_operator: ((run-psi4.hamiltonian))
      type: hamiltonian-operator
  outputs:
    - name: hamiltonian
      type: hamiltonian-operator
- name: generate-random-ansatz-params
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, qe-openfermion, z-quantum-vqe]
      parameters:
        file: z-quantum-core/steps/circuit.py
        function: generate_random_ansatz_params
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.vqe.singlet_uccsd", "function_name": "SingletUCCSDAnsatz", "number_of_spatial_orbitals": 2, "number_of_alpha_electrons": 1, "transformation": "Jordan-Wigner"}'
      type: string
    - min_value: -0.01
      type: float
    - max_value: 0.01
      type: float
    - seed: 9
      type: int
    - number_of_parameters: "None"
      type: string
  outputs:
    - name: params
      type: ansatz-params
- name: optimize-circuit
  passed: [transform-hamiltonian, generate-random-ansatz-params]
  config:
    runtime:
      language: python3
      imports: [z-quantum-core, qe-openfermion, z-quantum-optimizers, qe-qhipster, z-quantum-vqe]
      parameters:
        file: z-quantum-optimizers/steps/optimizers.py
        function: optimize_variational_circuit
    resources:
      cpu: "1000m"
      memory: "1Gi"
      disk: "10Gi"
  inputs:
    - ansatz_specs: '{"module_name": "zquantum.vqe.singlet_uccsd", "function_name": "SingletUCCSDAnsatz", "number_of_spatial_orbitals": 2, "number_of_alpha_electrons": 1, "transformation": "Jordan-Wigner"}'
      type: string
    - backend_specs: '{"module_name": "qeqhipster.simulator", "function_name": "QHipsterSimulator"}'
      type: string
    - optimizer_specs: '{"module_name": "zquantum.optimizers.scipy_optimizer", "function_name": "ScipyOptimizer", "method": "L-BFGS-B"}'
      type: string
    - cost_function_specs: '{"module_name": "zquantum.core.cost_function", "function_name": "AnsatzBasedCostFunction", "estimator-specs": { "module_name": "zquantum.core.estimator", "function_name": "ExactEstimator"}}'
      type: string
    - qubit_operator: ((transform-hamiltonian.hamiltonian))
      type: hamiltonian-operator
    - initial_parameters: ((generate-random-ansatz-params.params))
      type: ansatz-params
  outputs:
    - name: optimization-results
      type: opt-results
    - name: optimized-parameters
      type: ansatz-params

types:
  - molecular-geometry
  - hamiltonian-operator
  - ansatz-params
  - opt-results
